{"/home/travis/build/npmtest/node-npmtest-rabbit.js/test.js":"/* istanbul instrument in package npmtest_rabbit_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-rabbit.js/lib.npmtest_rabbit.js.js":"/* istanbul instrument in package npmtest_rabbit_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_rabbit_js = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_rabbit_js = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-rabbit.js/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-rabbit.js && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_rabbit_js */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_rabbit_js\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_rabbit_js.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_rabbit_js.rollup.js'] =\n            local.assetsDict['/assets.npmtest_rabbit_js.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_rabbit_js.__dirname + '/lib.npmtest_rabbit_js.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-rabbit.js/node_modules/rabbit.js/index.js":"var sockets = require('./lib/sockets');\n\nmodule.exports = sockets;\nmodule.exports.createContext = function(url, connOpts) {\n  return new sockets.Context(url, connOpts);\n}\n","/home/travis/build/npmtest/node-npmtest-rabbit.js/node_modules/rabbit.js/lib/sockets.js":"var amqp = require('amqplib');\nvar inherits = require('util').inherits;\nvar EventEmitter = require('events').EventEmitter;\nvar Stream = require('stream');\nvar guid = require('node-uuid').v4;\n\nvar Readable = Stream.Readable || require('readable-stream/readable');\nvar Writable = Stream.Writable || require('readable-stream/writable');\nvar Duplex   = Stream.Duplex   || require('readable-stream/duplex');\n\nvar delay = global.setImmediate || process.nextTick;\n\n// Do the tedious string-or-buffer conversion. If I was using byte\n// streams, this would be done automatically; however I'm using\n// streams in object mode.\nfunction bufferify(chunk, encoding) {\n  return (typeof chunk === 'string')\n    ? new Buffer(chunk, encoding || 'utf8')\n    : chunk;\n}\n\n// To avoid errors being swallowed by the promise machinery, I provide\n// an error continuation that will emit the error outside the dynamic\n// extent of the promise.\nfunction errorLater(obj) {\n  return function(err) {\n    delay(function() {\n      obj.emit('error', err);\n    });\n  }\n}\n\nfunction ignore() {} // for stubbing out methods I don't care about;\n                     // i.e., _read\n\nfunction Context(url, connOpts) {\n  EventEmitter.call(this);\n  var self = this;\n  var onError = errorLater(this);\n  var c = this._connection = amqp.connect(url, connOpts);\n  c.then(function(conn) {\n    conn.on('error', onError);\n    ['close', 'blocked', 'unblocked'].forEach(function(ev) {\n      conn.on(ev, self.emit.bind(self, ev));\n    });\n  });\n  c.then(this.emit.bind(this, 'ready')).then(null, onError);\n};\ninherits(Context, EventEmitter);\n\nvar SOCKETS = {\n  PUB: PubSocket,\n  PUBLISH: PubSocket,\n  SUB: SubSocket,\n  SUBSCRIBE: SubSocket,\n  PUSH: PushSocket,\n  PULL: PullSocket,\n  REQ: ReqSocket,\n  REQUEST: ReqSocket,\n  REP: RepSocket,\n  REPLY: RepSocket,\n  TASK: TaskSocket,\n  WORKER: WorkerSocket\n};\n\nmodule.exports = SOCKETS;\n\nContext.prototype.socket = function(type, options) {\n  var Ctr = SOCKETS[type];\n  if (Ctr) {\n    var s = new Ctr(this._connection.then(function(c) {\n      return c.createChannel();\n    }), options);\n    return s;\n  }\n  else throw new Error('Undefined socket type ' + type);\n};\n\nContext.prototype.close = function(callback) {\n  this._connection.then(function(c) {\n    c.close().then(callback);\n  });\n};\n\nmodule.exports.Context = Context;\n\n// Because we may have to wait on the channel being opened (and other\n// things), each method dependent on the channel is patched to one\n// that synchronises on `ready` then unpatches all of the methods (and\n// calls the unpatched version). The methods must all be unpatched in\n// the same tick, so that they don't get re-ordered.\nfunction patch(self, ready, methods) {\n  methods.forEach(function(method) {\n    if (self[method] && !self.hasOwnProperty(method)) {\n      self[method] = function() {\n        var args = arguments;\n        ready.then(function() {\n          methods.forEach(function(method) {delete self[method];});\n          self[method].apply(self, args);\n        });\n      };\n    }\n  });\n}\n\n// This is a pseudo-constructor, in that I only ever use it to\n// initialise things in other constructors, to get a kind of multiple\n// inheritence. The methods are transplanted to each prototype with\n// `addSocketMethods`.\nfunction Socket(setup, options) {\n  var self = this;\n  this.options = options = options || {};\n  var ready = setup.then(function(ch) { self.ch = ch; });\n  patch(self, ready,\n        ['close', 'write', 'end', 'connect',\n         'setsockopt', 'ack', 'requeue', 'discard', 'publish']);\n\n  function closeAndInvalidate(event, err) {\n    this.readable = this.writable = false;\n    delay(this.emit.bind(this, event, err));\n  }\n\n  var close = closeAndInvalidate.bind(this, 'close');\n  var error = closeAndInvalidate.bind(this, 'error');\n\n  // Relay these events from the channel\n  setup.then(function(ch) {\n    ch.on('close', close);\n    ch.on('error', error);\n    ch.on('drain', self.emit.bind(self, 'drain'));\n    ch.on('readable', self.emit.bind(self, 'readable'));\n  });\n\n  // Apply any options we've been given, in case they have immediate\n  // effects rather than just being consulted (e.g., prefetch).\n  ready.then(function() {\n    for (var opt in options) {\n      self.setsockopt(opt, options[opt]);\n    }\n  }).then(null, errorLater(this));\n  // ^ pick up any setup or setsockopt error and reraise it as an\n  // error event\n}\n\nfunction close() {\n  this.ch.close();\n}\n\nfunction end(chunk, encoding) {\n  if (chunk !== undefined) this.write(chunk, encoding);\n  this.close();\n}\n\nfunction setsockopt(opt, value) {\n  switch (opt) {\n  case 'prefetch':\n    this.ch.prefetch(value); break;\n  case 'expiration':\n  case 'persistent':\n  case 'topic':\n  case 'task':\n    this.options[opt] = value; break;\n  }\n}\n\nfunction addSocketMethods(Class) {\n  Class.prototype.close = close;\n  Class.prototype.setsockopt = setsockopt;\n}\n\nfunction PubSocket(channel, opts) {\n  Writable.call(this);\n  Socket.call(this, channel, opts);\n  this.pubs = [];\n}\ninherits(PubSocket, Writable);\naddSocketMethods(PubSocket);\nPubSocket.prototype.end = end;\n\nPubSocket.prototype.connect = function(destination, callback) {\n  var self = this, ch = this.ch;\n  if (this.options.noCreate) {\n    self.pubs.push(destination);\n    delay(callback);\n  }\n  else {\n    ch.assertExchange(destination,\n                      this.options.routing || 'fanout',\n                      {durable: false, autoDelete: false})\n      .then(function() {\n        self.pubs.push(destination);\n      }).then(callback);\n  };\n}\n\nPubSocket.prototype.publish = function(topic, chunk, encoding) {\n  var ch = this.ch;\n  if (!topic) topic = this.options.topic || '';\n  var options = {expiration: this.options.expiration,\n                 persistent: this.options.persistent};\n  var allpubs = true;\n  this.pubs.forEach(function(dest) {\n    allpubs = allpubs &&\n      ch.publish(dest, topic,\n                 bufferify(chunk, encoding),\n                 options);\n  });\n  return allpubs;\n};\n\nPubSocket.prototype.write = function(chunk, encoding) {\n  return this.publish(false, chunk, encoding);\n};\n\n\nfunction SubSocket(channel, opts) {\n  Readable.call(this, {objectMode: true});\n\n  this.subs = [], this.patterns = [];\n  var self = this;\n\n  var setup = channel.then(function(ch) {\n    return ch.assertQueue('', {\n      exclusive: true, autoDelete: true\n    }).then(function(ok) {\n      self.queue = ok.queue; // for inspection\n      return ch.consume(ok.queue, function(msg) {\n        // if msg is null, this indicates a cancel, i.e., end of\n        // stream. Pushing such a null tells the stream to emit 'end'.\n        self.push(msg && msg.content);\n      }, {noAck:true, exclusive:true})\n        .then(function() { return ch; });\n    });\n  });\n  Socket.call(this, setup, opts);\n}\ninherits(SubSocket, Readable);\naddSocketMethods(SubSocket);\n\nSubSocket.prototype.connect = function(source, topic, callback) {\n  // Support the general form of connect\n  if (callback === undefined && typeof topic === 'function') {\n    callback = topic; topic = '';\n  } else topic = topic || '';\n\n  var ch = this.ch, queue = this.queue, self = this;\n  if (this.options.noCreate) {\n    ch.bindQueue(queue, source, topic)\n      .then(callback);\n  }\n  else {\n    ch.assertExchange(source,\n                      this.options.routing || 'fanout',\n                      {durable: false, autoDelete: false})\n      .then(function(ok) {\n        return ch.bindQueue(queue, source, topic);\n      })\n      .then(callback);\n  }\n};\n\n// AMQP and the stream API don't really work well together here. I'm\n// supposed to initiate reads when this method is called, then not\n// push any more once I get `false` back from `#push`; but how do I do\n// that with AMQP? (I guess I could use channel.flow, but that seems\n// rather overwrought; or, I could use prefetch and start/stop\n// acknowledging messages).\nSubSocket.prototype._read = ignore;\n\n\nfunction PushSocket(channel, opts) {\n  Writable.call(this);\n  Socket.call(this, channel, opts);\n  this.queues = [];\n}\ninherits(PushSocket, Writable);\naddSocketMethods(PushSocket);\nPushSocket.prototype.end = end;\n\nPushSocket.prototype.connect = function(destination, callback) {\n  var self = this, ch = this.ch;\n  if (this.options.noCreate) {\n    self.queues.push(destination);\n    delay(callback);\n  }\n  else {\n    ch.assertQueue(destination, {durable: this.options.persistent})\n      .then(function(ok) {\n        self.queues.push(destination);\n      }).then(callback);\n  }\n};\n\nPushSocket.prototype.write = function(chunk, encoding) {\n  var queue = this.queues.shift();\n  if (queue !== undefined) {\n    this.queues.push(queue);\n    var options = {expiration: this.options.expiration,\n                   persistent: this.options.persistent};\n    return this.ch.sendToQueue(queue,\n                               bufferify(chunk, encoding), options);\n  }\n  else return true;\n};\n\n\nfunction PullSocket(channel, opts) {\n  Readable.call(this, {objectMode: true});\n  Socket.call(this, channel, opts);\n  this.consumers = {};\n}\ninherits(PullSocket, Readable);\naddSocketMethods(PullSocket);\n\nPullSocket.prototype.connect = function(source, callback) {\n  var self = this, ch = this.ch;\n\n  if (this.consumers[source]) {\n    if (callback) delay(callback); return;\n  }\n\n  function consume() {\n    ch.consume(source, function(msg) {\n      self.push(msg && msg.content);\n      ch.ack(msg);\n    }, {noAck:false})\n      .then(function(ok) {\n        self.consumers[source] = ok.consumerTag;\n      })\n      .then(callback);\n  }\n\n  if (this.options.noCreate) {\n    consume();\n  }\n  else {\n    ch.assertQueue(source, {durable: this.options.persistent})\n      .then(consume);\n  }\n};\n\nPullSocket.prototype._read = ignore;\n\nfunction WorkerSocket(channel, opts) {\n  Readable.call(this, {objectMode: true});\n  Socket.call(this, channel, opts);\n  this.consumers = {};\n  this.unacked = [];\n}\ninherits(WorkerSocket, Readable);\naddSocketMethods(WorkerSocket);\n\nWorkerSocket.prototype.connect = function(source, callback) {\n  var self = this, ch = this.ch;\n\n  if (this.consumers[source]) {\n    if (callback) delay(callback); return;\n  }\n\n  function consume() {\n    return ch.consume(source, function(msg) {\n      if (msg) self.unacked.push(msg);\n      self.push(msg && msg.content);\n    }, {noAck:false}).then(function(ok) {\n      self.consumers[source] = ok.consumerTag;\n    }).then(callback);\n  }\n\n  if (this.options.noCreate) {\n    consume();\n  }\n  else {\n    ch.assertQueue(source, {durable: this.options.persistent})\n      .then(consume);\n  }\n};\n\nWorkerSocket.prototype.ack = function() {\n  var msg = this.unacked.shift();\n  if (!msg) {\n    throw new Error(\"ack called with no unacknowledged messages\");\n  }\n  this.ch.ack(msg);\n};\n\n\nWorkerSocket.prototype.requeue = function() {\n    var msg = this.unacked.shift();\n    if (!msg) {\n        throw new Error(\"requeue called with no unacknowledged messages\");\n    }\n    this.ch.reject(msg);\n};\n\n\nWorkerSocket.prototype.discard = function() {\n    var msg = this.unacked.shift();\n    if (!msg) {\n        throw new Error(\"discard called with no unacknowledged messages\");\n    }\n\n    this.ch.reject(msg, false);\n};\n\n\nWorkerSocket.prototype._read = ignore;\n\n\nfunction ReqSocket(channel, opts) {\n  Duplex.call(this, {objectMode:true});\n  this.queues = [];\n  this.awaiting = [];\n  this.replyQ = null;\n\n  var self = this;\n\n  var setup = channel.then(function(ch) {\n    return ch.assertQueue('', {exclusive:true, autoDelete:true})\n      .then(function(ok) {\n        self.replyQ = ok.queue;\n        return ch.consume(ok.queue, function(msg) {\n          if (msg !== null) {\n            self.handleReply(msg);\n            ch.ack(msg);\n          }\n          else self.push(null);\n        }, {noAck:false, exclusive: true})\n          .then(function() { return ch; });\n      });\n  });\n\n  Socket.call(this, setup, opts);\n}\ninherits(ReqSocket, Duplex);\naddSocketMethods(ReqSocket);\nReqSocket.prototype.end = end;\n\nReqSocket.prototype.handleReply = function(msg) {\n  var cid = msg.properties.correlationId;\n  for (var i = 0; i < this.awaiting.length; i++) {\n    if (cid === this.awaiting[i].correlationId) {\n      this.awaiting[i].answer = msg.content;\n    }\n  }\n  var lwm; while (lwm = this.awaiting[0]) {\n    if (lwm.answer !== null) this.push(lwm.answer);\n    else break;\n    this.awaiting.shift();\n  }\n};\n\nReqSocket.prototype.connect = function(destination, callback) {\n  var self = this, ch = this.ch;\n\n  if (this.options.noCreate) {\n      self.queues.push(ok.queue);\n    delay(callback);\n  }\n  else {\n    ch.assertQueue(destination, {durable: this.options.persistent})\n      .then(function(ok) {\n        self.queues.push(ok.queue);\n      }).then(callback);\n  }\n};\n\nReqSocket.prototype.write = function(chunk, encoding) {\n  var ch = this.ch, reply = this.replyQ;\n\n  var queue = this.queues.shift();\n  if (queue) {\n    this.queues.push(queue);\n    var corrId = guid();\n    this.awaiting.push({correlationId: corrId, answer: null});\n    var options = {replyTo: reply, deliveryMode: true,\n                   correlationId: corrId,\n                   expiration: this.options.expiration,\n                   persistent: this.options.persistent};\n    return ch.sendToQueue(queue, bufferify(chunk, encoding), options);\n  }\n  else return true;\n};\n\nReqSocket.prototype._read = ignore;\n\n\nfunction RepSocket(channel, opts) {\n  Duplex.call(this, {objectMode: true});\n  Socket.call(this, channel, opts);\n  this.requests = [];\n  this.consumers = {};\n}\ninherits(RepSocket, Duplex);\naddSocketMethods(RepSocket);\nRepSocket.prototype.end = end;\n\nRepSocket.prototype.connect = function(source, callback) {\n  var self = this, ch = this.ch;\n\n  if (this.consumers[source]) {\n    delay(callback); return;\n  }\n\n  function consume() {\n    return ch.consume(source, function(msg) {\n      if (msg !== null) {\n        self.requests.push(msg);\n        self.push(msg.content);\n      }\n      else self.push(null);\n    }, {noAck:false}).then(function(ok) {\n      self.consumers[source] = ok.consumerTag;\n    }).then(callback);\n  }\n\n  if (this.options.noCreate) {\n    consume();\n  }\n  else {\n    ch.assertQueue(source, {durable: this.options.persistent})\n      .then(consume);\n  }\n};\n\nRepSocket.prototype.write = function(chunk, encoding) {\n  var ch = this.ch, current = this.requests.shift();\n\n  if (!current)\n    throw new Error('Write with no pending request');\n\n  var replyTo = current.properties.replyTo;\n  var cid = current.properties.correlationId;\n  // Replies are never persistent, because the queue disappears with\n  // its socket.\n  var options = {\n    deliveryMode: true,\n    expiration: this.options.expiration,\n    correlationId: cid\n  };\n  var res = ch.sendToQueue(replyTo, bufferify(chunk, encoding),\n                           options);\n  ch.ack(current);\n  return res;\n};\n\n\nRepSocket.prototype.requeue = function() {\n    var ch = this.ch, current = this.requests.shift();\n\n    if (!current)\n        throw new Error('Requeue with no pending request');\n\n    ch.reject(current);\n};\n\n\nRepSocket.prototype.discard = function() {\n    var ch = this.ch, current = this.requests.shift();\n\n    if (!current)\n        throw new Error('Discard with no pending request');\n\n    ch.reject(current, false);\n};\n\n\nRepSocket.prototype._read = ignore;\n\n// A task socket requires you to say which kinds of task you will\n// send, then lets you send to any one of them. This is like a PUSH\n// socket but instead of it round-robining among its connections, you\n// pick one each time (or set it for a few messages with a sockopt).\nfunction TaskSocket(channel, opts) {\n  Writable.call(this);\n  Socket.call(this, channel, opts);\n  this.queues = [];\n}\ninherits(TaskSocket, Writable);\naddSocketMethods(TaskSocket);\nTaskSocket.prototype.end = end;\n\nTaskSocket.prototype.connect = function(destination, callback) {\n  var queues = this.queues;\n\n  if (this.options.noCreate) {\n    queues.push(destination);\n    delay(callback);\n  }\n  else {\n    this.ch.assertQueue(destination,\n                        {durable: this.options.persistent})\n      .then(function(ok) {\n        queues.push(destination);\n      }).then(callback);\n  }\n};\n\nTaskSocket.prototype.write = function(chunk, encoding) {\n  return this.post(false, chunk, encoding);\n};\n\nTaskSocket.prototype.post = function(task, chunk, encoding) {\n  if (!task) task = this.options.task;\n  if (this.queues.indexOf(task) === -1)\n    throw new Error('Task \"' + task + '\" not connected');\n  var options = {expiration: this.options.expiration,\n                 persistent: this.options.persistent};\n  return this.ch.sendToQueue(task, bufferify(chunk, encoding),\n                             options);\n};\n"}